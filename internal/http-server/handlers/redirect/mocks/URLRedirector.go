// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// URLRedirector is an autogenerated mock type for the URLRedirector type
type URLRedirector struct {
	mock.Mock
}

// GetURL provides a mock function with given fields: alias
func (_m *URLRedirector) GetURL(alias string) (string, error) {
	ret := _m.Called(alias)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(alias)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(alias)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAnalytics provides a mock function with given fields: alias, userAgent
func (_m *URLRedirector) SaveAnalytics(alias string, userAgent string) error {
	ret := _m.Called(alias, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for SaveAnalytics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alias, userAgent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewURLRedirector creates a new instance of URLRedirector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLRedirector(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLRedirector {
	mock := &URLRedirector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
